# clean .geojson file

data_web = requests.get(url).text
data_scenario = json.loads(data_web) #loaded data from web

# convert to 2D geometrical data
## 2dtopsurface, delete special, key save real height

data_geo2d = []

# load it with shapely shape module and save it in a list
## e.g.
data_shape = [
{"geometry":{shape_obj},"level_h":15,"area":1000,"function":"residential","properties":{<diction>} },
{"geometry":{shape_obj},"level_h":15,"area":3000,"function":"commercial","properties":{<diction>} },
{"geometry":{shape_obj},"level_h":15,"area":3000,"function":"office","properties":{<diction>} }
]


# [METHOD1] USE R-TREE for polygons
s = STRtree(data_shape)
for this_polygon in data_shape:
    polys_intersect = s.query(this_polygon) #which polygon"s" intersect with this current one
    # polys_intersect=[B,C], this_polygon = [A]
    for poc, poly in enumearte(polys_intersect):
        new_poly = this_polygon.intersection(poly)
        #new_poly:[AB,AC] + poly:[B,C]



# [METHOD2] USE R-TREE for grid Space
grids = box(small_polygons) [{box_1},{box_2},...,{box_n}]
idx = r_tree(grids)
for id in idx:
from shapely.geometry import box, Polygon
for pixel in pixels:
    # say the pixel has llx, lly, urx, ury values.
    pixel_shape = box(llx, lly, urx, ury)

    for polygon in approximately_overlapping:
        # say the polygon has a ``value`` and a 2-D array of coordinates
        # [[x0,y0],...] named ``xy``.
        polygon_shape = Polygon(xy)
        ## add value to the pixel and detect how many time a pixel is added
        pixel_value += polygon_shape.intersection(pixel_shape).area * value
